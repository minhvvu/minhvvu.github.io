<!DOCTYPE HTML>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>IRIS Compare</title>

		<script type="text/javascript" src="js/jquery.min.js"></script>
		<style type="text/css">
${demo.css}
		</style>
		
<script type="text/javascript">
$(document).ready(function() {

    var options1 = {
        chart: {
            renderTo: 'container1',
            type: 'spline'
        },
        title: {text: 'VMeasure' },
        subtitle: {text: '(according to the number of constraints)'},
        xAxis: {title: {text: 'Number of original constraints'}},
        yAxis: {min: 0, max: 1, title: {text: 'VMeasure'}},
        series: []
    };

    var options2 = {
        chart: {
            renderTo: 'container2',
            type: 'column'
        },
        title: {text: 'Running time' },
        subtitle: {text: '(according to the number of constraints)'},
        xAxis: {title: {text: 'Number of original constraints'}},        
        yAxis: {title: {text: 'Running Time (second)'}},
        series: []
    };

    var options3 = {
        chart: {
            renderTo: 'container3',
            type: 'column'
        },
        title: {text: 'Number of Iterations' },
        subtitle: {text: '(according to the number of constraints)'},
        xAxis: {title: {text: 'Number of original constraints'}},
        yAxis: {title: {text: 'Number of Iterations'}},        
        series: []
    };

    var options4 = {
        chart: {
            renderTo: 'container4',
            type: 'column'
        },
        title: {text: 'Percent of Constraint Violation' },
        subtitle: {text: '(according to the number of constraints)'},
        xAxis: {title: {text: 'Number of original constraints'}},
        yAxis: {title: {text: 'Constraint Violation (%)'}},        
        series: []
    };

    function buildDataSeries(jsonLink, serieName) {
        $.getJSON(jsonLink, function(data) {
            [].sort.call(data, function(a, b) {return a.nConstraintOriginal - b.nConstraintOriginal});
            buildOptionsData(data, serieName, "vMeasure", options1);
            buildOptionsData(data, serieName, "violation", options4);
            buildOptionsData(data, serieName, "iterTerminate", options3);
            buildOptionsData(data, serieName, "duration", options2)
            buildChart();
        });
    };

    function buildOptionsData(rawData, serieName, keyName, toChartOptions) {
        var arrData = new Array();
        var nErrors = 0;
        $.each(rawData, function(key, dataObj) {
            if (-1 == dataObj.reachLocalMinimal) { nErrors ++; return; }

            switch(keyName) {
                case "vMeasure": 
                    value = dataObj.vMeasure;
                    break;
                case "violation":
                    value = (dataObj.nMLViolation + dataObj.nCLViolation) /
                        (dataObj.nMLStart + dataObj.nCLStart) * 100;
                    break;
                case "iterTerminate":
                    value = dataObj.iterTerminate;
                    break;
                case "duration":
                    value = dataObj.duration * 1e-3;
                    break;
            }
            arrData.push([dataObj.nConstraintOriginal, value]);
        });
        toChartOptions.series.push({'data':arrData, 'name':serieName});
    }

    function buildChart () {
        if (4 == options1.series.length) {
            var chart1 = new Highcharts.Chart(options1);
        }
        if (4 == options2.series.length) {
            var chart2 = new Highcharts.Chart(options2);
        }
        if (4 == options3.series.length) {
            var chart3 = new Highcharts.Chart(options3);
        }
        if (4 == options4.series.length) {
            var chart4 = new Highcharts.Chart(options4);
        }
    }

    buildDataSeries('data/IRIS_PCKMEANS_NOMETRIC.json', 'PCKMEANS_NOMETRIC');
    buildDataSeries('data/IRIS_MPCKMEANS_GLOBAL_DIAGONAL.json', 'MPCKMEANS_GLOBAL_DIAGONAL');
    buildDataSeries('data/IRIS_MPCKMEANS_GLOBAL_FULL.json', 'MPCKMEANS_GLOBAL_FULL');
    buildDataSeries('data/IRIS_MPCKMEANS_LOCAL_DIAGONAL.json', 'MPCKMEANS_LOCAL_DIAGONAL');

});
</script>

	</head>
	<body>
<script src="highcharts/highcharts.js"></script>
<script src="highcharts/modules/data.js"></script>
<script src="highcharts/modules/exporting.js"></script>

<!-- Additional files for the Highslide popup effect -->
<!-- 
<script type="text/javascript" src="http://www.highcharts.com/media/com_demo/highslide-full.min.js"></script>
<script type="text/javascript" src="http://www.highcharts.com/media/com_demo/highslide.config.js" charset="utf-8"></script>
<link rel="stylesheet" type="text/css" href="http://www.highcharts.com/media/com_demo/highslide.css" />
 -->
<div>
    <span style="background-color:#f38630;font-size:30px">Database IRIS</span>
    <span style="text-align:center">
        <h3>150 examples, 3 clusters, data dimensions = 4</h3></span>
    <span style="text-align:center">
        <h4>(Run 12 experimentations, each experimentation repeats 10 times and get average result)</h4></span>
</div>

<div id="container1" style="float:left; width: 48%; height: 500px; margin: 0 auto"></div>
<div id="container3" style="float:right; width: 48%; height: 500px; margin: 0 auto"></div>
<div id="container2" style="float:left; width: 48%; height: 100%; margin: 0 auto"></div>
<div id="container4" style="float:right; width: 48%; height: 100%; margin: 0 auto"></div>

	</body>
</html>
